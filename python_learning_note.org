#+TITLE: python learning note
#+AUTHOR: Li Gao-Yang
* python support in org mode
** python code block
#+begin_src python :results value
return 2/3
#+end_src

#+RESULTS:
: 0.6666666666666666

#+begin_src python :results output
print(2/3)
#+end_src

#+RESULTS:
: 0.6666666666666666

#+begin_src python :results output :session
print(2/3)
#+end_src

#+RESULTS:
: 0.6666666666666666

** inline calling
Two plus two equals src_python{return(2+2)}
** plotting
#+begin_src python :results file
import matplotlib, numpy
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
plt.savefig('python-matplot-fig.png')
return 'python-matplot-fig.png' # return filename to org-mode
#+end_src

#+RESULTS:
[[file:python-matplot-fig.png]]

* A primer on scientific programming with python
** using a program as a calculator
#+begin_src python :results output
print(5*0.6 - 0.5*9.81*0.6**2)
#+end_src

#+RESULTS:
: 1.2342
** using variables
#+begin_src python :results output
v0 = 5
g = 9.81
t = 0.6
y = v0*t - 0.5*g*t**2
print(y)
#+end_src

#+RESULTS:
: 1.2342
** Important print syntax
   - State "Important"  from ""           [2018-05-06 Sun 13:48]
#+begin_src python :results output
v0 = 5
g = 9.81
t = 0.6
y = v0*t - 0.5*g*t**2
print('At t=%g s, the height of the ball is %.2f m.' % (t,y))
#+end_src

#+RESULTS:
: At t=0.6 s, the height of the ball is 1.23 m.
#+begin_src python :results output
print("""y(t) is
the position of
our ball.""")
print()
print('y(t) is\nthe position of\nour ball')
#+end_src

#+RESULTS:
: y(t) is
: the position of
: our ball.
:
: y(t) is
: the position of
: our ball
* Liaoxuefeng python3
** python 基础
以#开头的语句是注释
每一行都是一个语句
当语句以冒号:结尾时，缩进的语句视为代码块。
应该始终坚持使用4个空格的缩进。
Python程序是大小写敏感的

# print absolute value of an integer:
#+begin_src python :results output
a = 100
if a >= 0:
    print(a)
else:
    print(-a)
#+end_src

#+RESULTS:
: 100
*** 数据类型
- 整数
  Python可以处理任意大小的整数
- 浮点数
- 字符串
  + 字符串是以单引号'或双引号"括起来的任意文本
  + 如果'本身也是一个字符，那就可以用""括起来
  + 如果字符串内部既包含'又包含",可以用转义字符\来标识
  + 允许用r''表示''内部的字符串默认不转义
  + 允许用'''...'''的格式表示多行内容
- 布尔值
  + 只有True、False两种值
  + and or not
- 空值none
- 变量，动态语言与静态语言
- 常量
  + 通常用全部大写的变量名表示常量
#+begin_src python :results output
print('I\'m ok.')
print('I\'m learning\nPython.')
print('\\\n\\')
print(r'''hello,\n
world''')
#+end_src

#+RESULTS:
: I'm ok.
: I'm learning
: Python.
: \
: \
: hello,\n
: world
*** Important 字符串与编码
    - State "Important"  from ""           [2018-05-03 Thu 10:49]
# -*- coding: utf-8 -*-
- %运算符就是用来格式化字符串的。
- 在字符串内部，%s表示用字符串替换，
- %d表示用整数替换，
- 有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。
- 如果只有一个%?，括号可以省略。
- 格式化整数和浮点数还可以指定是否补0和整数与小数的位数
- %s永远起作用，它会把任何数据类型转换为字符串

- %d	整数
- %f	浮点数
- %s	字符串
- %x	十六进制整数

#+begin_src python :results output
print('Hello, %s' % 'world')
print('Hi, %s, you have $%d.' % ('Michael', 1000000))
print('%4d-%0004d' % (3, 1))
print('%.2f' % 3.1415926)
#+end_src

#+RESULTS:
: Hello, world
: Hi, Michael, you have $1000000.
:    3-0001
: 3.14
*** list与tuple <2018-05-03 Thu>
**** list
- 索引是从0开始
- 用-1做索引，直接获取最后一个元素
- 往list中追加元素到末尾, classmates.append('Adam')
- 把元素插入到指定的位置, classmates.insert(1,'Jack')
- 删除list末尾的元素，用pop()
- 删除指定位置的元素，用pop(i)
#+begin_src python :results output
classmates = ['Michael', 'Bob', 'Tracy']
print(classmates)
print(len(classmates))
print(classmates[-3])
classmates.append('Adam')
print(classmates)
#+end_src

#+RESULTS:
: ['Michael', 'Bob', 'Tracy']
: 3
: Michael
: ['Michael', 'Bob', 'Tracy', 'Adam']
**** tuple
tuple和list非常类似，但是tuple一旦初始化就不能修改
#+begin_src python :results output
classmates = ('Michael', 'Bob', 'Tracy')
t = (1,)
print(classmates, len(t),t[-1])
#+end_src

#+RESULTS:
: ('Michael', 'Bob', 'Tracy') 1 1

*** Important 条件判断 <2018-05-04 Fri>
    - State "Important"  from ""           [2018-05-04 Fri 09:30]
- if语句的完整形式
  if <条件判断1>:
      <执行1>
  elif <条件判断2>:
      <执行2>
  elif <条件判断3>:
      <执行3>
  else:
      <执行4>
它是从上往下判断，如果在某个判断上是True，
把该判断对应的语句执行后，就忽略掉剩下的elif和else.
##########################################################################
- 只要条件为非零数值、非空字符串、非空list等，就判断为True，否则为False。#
##########################################################################
*** 循环 <2018-05-04 Fri>
- for x in list:
- while x :
- break
- continue
#+begin_src python :results output
print(range(5))
print(list(range(5)))
for i in range(5):
    print(i)
#+end_src

#+RESULTS:
: range(0, 5)
: [0, 1, 2, 3, 4]
: 0
: 1
: 2
: 3
: 4
*** 使用dict <2018-05-05 Sat>
dict全称dictionary，在其他语言中也称为map，
使用键-值（key-value）存储，具有极快的查找速度。
把数据放入dict的方法，除了初始化时指定外，还可以通过key放入
要避免key不存在的错误，有两种办法:
- 通过in判断key是否存在
- 通过dict提供的get()方法，如果key不存在，
  可以返回None，或者自己指定的value
要删除一个key，用pop(key)方法，对应的value也会从dict中删除
请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的
##########################################################
##  和list比较，dict有以下几个特点：
##  查找和插入的速度极快，不会随着key的增加而变慢；
##  需要占用大量的内存，内存浪费多。
##
##  而list相反：
##  查找和插入的时间随着元素的增加而增加；
##  占用空间小，浪费内存很少。
##  所以，dict是用空间来换取时间的一种方法。
##########################################################
- 哈希算法（Hash）
- 作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，
  因此，可以放心地作为key。而list是可变的，就不能作为key
#+begin_src python :results output
d={'Michael': 95, 'Bob':75, 'Tracy':85}
d['Adam'] = 67
print(d['Michael'])
print('Adam' in d)
print(d.get('Tom', 0))
print(d.pop('Bob'))
print(d)
#+end_src

#+RESULTS:
: 95
: True
: 0
: 75
: {'Michael': 95, 'Tracy': 85, 'Adam': 67}
*** 使用set <2018-05-05 Sat>
- set和dict类似，也是一组key的集合，但不存储value。
  由于key不能重复，所以，在set中，没有重复的key。
- 通过add(key)方法可以添加元素到set中
- 过remove(key)方法可以删除元素
#+begin_src python :results output
s = set([1, 2, 3])
print(s)
s1 = set([1, 2, 3])
s2 = set([2, 3, 4])
print(s1 & s2)
print(s1 | s2)
print(set((1,2,3)))
# print(set((1,[2,3])))
new_dict={'Wang':59}
new_dict['Ligy']=100
print(new_dict)
#+end_src

#+RESULTS:
: {1, 2, 3}
: {2, 3}
: {1, 2, 3, 4}
: {1, 2, 3}
: {'Wang': 59, 'Ligy': 100}

** 函数
*** 调用函数 <2018-05-06 Sun>
- 可以在交互式命令行通过help(abs)查看abs函数的帮助信息
*** 数据类型转换 <2018-05-06 Sun>
- int('123')
- float('12.4')
- str(1.2)
- bool(1)
- bool('')
- 函数名其实就是指向一个函数对象的引用，
  完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名
#+begin_src python :results output
print(bool("2"))
a = abs
print(a(-9))
tuple_={'255':hex(int('255'))}
tuple_['1000']=hex(int('1000'))
print(tuple_['255'],tuple_['1000'])
print('255的16进制表示为%s\n1000的16进制表示为%s' % (hex(255), hex(1000)))
#+end_src

#+RESULTS:
: True
: 9
: 0xff 0x3e8
: 255的16进制表示为0xff
: 1000的16进制表示为0x3e8
*** 定义函数 <2018-05-06 Sun>
- 定义一个函数要使用def语句，依次写出函数名、括号、
  括号中的参数和冒号:，然后，在缩进块中编写函数体，
  函数的返回值用return语句返回。
- 函数体内部的语句在执行时，一旦执行到return时，
  函数就执行完毕，并将结果返回
- 如果没有return语句，函数执行完毕后也会返回结果，只是结果为None
- 果你已经把my_abs()的函数定义保存为abstest.py文件了，
  那么，可以在该文件的当前目录下启动Python解释器，
  用from abstest import my_abs来导入my_abs()函数，
  注意abstest是文件名（不含.py扩展名）
- pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，
  比如现在还没想好怎么写函数的代码，就可以先放一个pass，
  让代码能运行起来。
#+begin_src python :results output
def my_print(x):
    print('what\'s up man?')
    # return x*x
a=my_print(3)
print(a)
#+end_src

#+RESULTS:
: what's up man?
: None
**** 空函数
**** 参数检查
数据类型检查可以用内置函数isinstance()实现。
#+begin_src python :return output
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
my_abs('A')
#+end_src

#+RESULTS:
**** 返回多个值
Python的函数返回多值其实就是返回一个tuple，但写起来更方便
return nx, ny
*** 函数的参数 <2018-05-07 Mon>
- 位置参数 power(x), power(x, n), 调用函数时，
  传入的两个值按照位置顺序依次赋给参数x和n
- 默认参数 power(x, n=2)
  设置默认参数时，有几点要注意:
  + 一是必选参数在前，默认参数在后，否则Python的解释器会报错
  + 二是当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。
    变化小的参数就可以作为默认参数。
  + 有多个默认参数时，调用的时候，既可以按顺序提供默认参数，
    比如调用enroll('Bob', 'M', 7)用在参数age上，
    city参数由于没有提供，仍然使用默认值。
  + 也可以不按顺序提供部分默认参数。
    当不按顺序提供部分默认参数时，需要把参数名写上。
  + 定义默认参数要牢记一点：默认参数必须指向不变对象！
#+begin_src python :results output
def add_end(L=[]):
    if L is None:
        L = []
    L.append('END')
    return L
print(add_end())
print(add_end())

def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
print(add_end())
print(add_end())
#+end_src

#+RESULTS:
: ['END']
: ['END', 'END']
: ['END']
: ['END']
**** DONE 可变参数
     - State "TODO"       from ""           [2018-05-07 Mon 19:18]
- 可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。
- 仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，
  函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数
#+begin_src python :results output
def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
print(calc(1, 2, 9))
print(calc())
#+end_src

#+RESULTS:
: 86
: 0

**** TODO 关键字参数
     - State "TODO"       from ""           [2018-05-07 Mon 19:19]
**** TODO 命名关键字参数
     - State "TODO"       from ""           [2018-05-07 Mon 19:20]
**** TODO 参数组合
     - State "TODO"       from ""           [2018-05-07 Mon 19:20]
**** TODO 小结
     - State "TODO"       from ""           [2018-05-07 Mon 19:20]
*** TODO 递归函数 <2018-05-07 Mon>
    - State "TODO"       from ""           [2018-05-07 Mon 19:24]
** 高级特性
在Python中，代码不是越多越好，而是越少越好。
代码不是越复杂越好，而是越简单越好。
*** slice 切片 <2018-05-07 Mon>
L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']

- 取前3个元素 L[0:3]
- 倒数切片 L[-2:]
- L[:2] 索引 L[0], L[1]
- 空的list也可以用L[:1]的方式索引
- 倒序索引 L[-1::-1]
#+begin_src python :results output
L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
print(len(L))
#print(L[:3])
#print(L[1:3])
#print(L[-5])
print(L[-4:100])
print(L[-1::-1])
print(L[0])
N = list(range(40))
print(N[:20:3])
print(N[:])
print((0, 1, 2, 3, 4, 5, 6, 7, 8)[:3])
print('abcdefghi'[::2])
L1=''
print(L1[:-1])
print(len(L1))
def trim(str_):
    if not isinstance(str_, str):
        raise TypeError('bad operand type')

    while str_[:1]==' ':
        str_=str_[1:]
        print(str_)
    while str_[-1:]==' ':
        str_=str_[-len(str_):-2]
        print(str_)
    return str_
#+end_src

#+RESULTS:
#+begin_example
5
['Sarah', 'Tracy', 'Bob', 'Jack']
['Jack', 'Bob', 'Tracy', 'Sarah', 'Michael']
Michael
[0, 3, 6, 9, 12, 15, 18]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
(0, 1, 2)
acegi

0
#+end_example
*** iteration 迭代 <2018-05-08 Tue>
- 如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，
  这种遍历我们称为迭代（Iteration）。
- 在Python中，迭代是通过for ... in来完成的，而很多语言比如C语言，
  迭代list是通过下标完成的，比如Java代码
- list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，
  只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代
- 默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，
  如果要同时迭代key和value，可以用for k, v in d.items()。
- 由于字符串也是可迭代对象，因此，也可以作用于for循环
- 如何判断一个对象是可迭代对象呢？
  方法是通过collections模块的Iterable类型判断
- enumerate函数可以把一个list变成索引-元素对，
  这样就可以在for循环中同时迭代索引和元素本身
- 上面的for循环里，同时引用了两个变量，在Python里是很常见的
  ，比如下面的代码
#+begin_src python :results output
d = {'a': 1, 'b': 2, 'c': 3}
for k, v in d.items():
    print(k, v)
for ch in 'AbC':
    print(ch, 'Abc'[::-1])
from collections import Iterable
print(isinstance('abc', Iterable)) # str是否可迭代
for i, value in enumerate(['A', 'B', 'C']):
    print(i, value)
for x, y in [(1, 'a'), (2, d), (3, v)]:
    print(x, y)
#+end_src

#+RESULTS:
#+begin_example
a 1
b 2
c 3
A cbA
b cbA
C cbA
True
0 A
1 B
2 C
1 a
2 {'a': 1, 'b': 2, 'c': 3}
3 3
#+end_example

*** list comprehensions 列表生成式 <2018-05-21 Mon>
列表生成式则可以用一行语句代替循环生成上面的list
#+begin_src python :results output
print([x*x for x in range(1,11)])
print([x*x for x in range(1,11) if x%3==0])
print([m+n for m in 'abc' for n in 'xyz'])
import os
print(os.listdir('.'))
print([d for d in os.listdir('.')])
print('ABcd'.lower(), 'fdsa'.upper())
print('abc'[2])
L = ['Hello', 'World', 18, 'Apple', None]
print([s.lower() for s in L if isinstance(s, str)])
print([s.lower() if isinstance(s, str) else s for s in L])
#+end_src

#+RESULTS:
: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
: [9, 36, 81]
: ['ax', 'ay', 'az', 'bx', 'by', 'bz', 'cx', 'cy', 'cz']
: ['PythonPlottingBeginnersGuide.pdf', 'inset', 'A_Primer_on_Scientific_Programming_with_Python.pdf', 'learnxinyminutes-docs', 'python_learning_note.org_archive', 'intro_mnist', 'report-fig2', 'python_learning_note.org', 'test', 'energy_per_magnon']
: ['PythonPlottingBeginnersGuide.pdf', 'inset', 'A_Primer_on_Scientific_Programming_with_Python.pdf', 'learnxinyminutes-docs', 'python_learning_note.org_archive', 'intro_mnist', 'report-fig2', 'python_learning_note.org', 'test', 'energy_per_magnon']
: abcd FDSA
: c
: ['hello', 'world', 'apple']
: ['hello', 'world', 18, 'apple', None]

*** generator 生成器 <2018-05-24 Thu>
受到内存限制，列表容量肯定是有限的,
在Python中，这种一边循环一边计算的机制，称为生成器：generator。
创建一个generator的方法:
- 第一种方法，只要把一个列表生成式的[]改成()，就创建了一个generator
- 另一种，定义包含yield关键字的的函数, 在循环中不断yield.
  如果想要拿到返回值，必须捕获StopIteration错误，
  返回值包含在StopIteration的value中.
#杨辉三角
#+INCLUDE: "yangh.py" src python

#+begin_src python :results output
g=(x*x for x in range(9))
print(next(g))
print(next(g))
print(next(g))
print('????')
for i in g:
    print(i)
print()
def fibnacci(N):
    n,a,b=0,0,1
    while n < N:
        yield b
        a,b=b,a+b
        n=n+1
    return 'done'
f= fibnacci(9)
for i in f:
    print(i)
#+end_src

#+RESULTS:
#+begin_example
0
1
4
????
9
16
25
36
49
64

1
1
2
3
5
8
13
21
34
#+end_example

*** Iterator 迭代器 <2018-05-25 Fri>
可以使用isinstance()判断一个对象是否是Iterable
可以被next()函数调用并不断返回下一个值的对象称为Iterator
生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator
把list、dict、str等Iterable变成Iterator可以使用iter()函数
Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算
- 凡是可作用于for循环的对象都是Iterable类型
- 凡是可作用于next()函数的对象都是Iterator类型
- Python的for循环本质上就是通过不断调用next()函数实现的
#+begin_src python :results output
from collections import Iterable
print(isinstance([], Iterable))
print(isinstance({}, Iterable))
print(isinstance('abs', Iterable))
print(isinstance((x for x in range(9)), Iterable))
print(isinstance(range(9), Iterable))
from collections import Iterator
isinstance((x for x in range(10)), Iterator)

#+end_src

#+RESULTS:
: True
: True
: True
: True
: True
** TODO 函数式编程
    - State "TODO"       from ""           [2018-05-25 Fri 16:52]
** module 模块<2018-05-25 Fri>
为了避免模块名冲突，Python引入了按目录来组织模块的方法，
称为Package（包）
- 一个abc.py的文件就是一个名字叫abc的模块，
- 一个xyz.py的文件就是一个名字叫xyz的模块
- 每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的
- abc.py模块的名字就变成了mycompany.abc，类似的，
- xyz.py的模块名变成了mycompany.xyz
- __init__.py可以是空文件，也可以有Python代码，
  因为__init__.py本身就是一个模块，而它的模块名就是mycompany
- 可以有多级目录，组成多级层次的包结构
- 模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，
  检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块
*** 使用module <2018-06-06 Wed>
#+INCLUDE: "hello.py" src python
- 任何模块代码的第一个字符串都被视为模块的文档注释
- 使用_author_变量把作者写进去
- argv至少有一个元素，因为第一个参数永远是该.py文件的名称
- 这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，
  最常见的就是运行测试
*** 作用域 <2018-06-06 Wed>
- 有的函数和变量我们希望仅仅在模块内部使用
- 类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，
  比如上面的__author__，__name__
- 类似_xxx和__xxx这样的函数或变量就是非公开的（private），
  不应该被直接引用，比如_abc，__abc等
#+begin_src python :results output
def _private_1(name):
    return 'Hello, %s' % name

def _private_2(name):
    return 'Hi, %s' % name

def greeting(name):
    if len(name) > 3:
        return _private_1(name)
    else:
        return _private_2(name)
#+end_src
- 调用greeting()函数不用关心内部的private函数细节，
  这也是一种非常有用的代码封装和抽象的方法
- 外部不需要引用的函数全部定义成private，
  只有外部需要引用的函数才定义为public
*** 安装第三方模块 <2018-06-07 Thu>
pip install pillow
*** 安装常用模块 <2018-06-07 Thu>
- anaconda (狂蟒之灾电影）
- 默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，
  搜索路径存放在sys模块的path变量中
- 添加自己的搜索目录，有两种方法:
  - sys.path.append('/Users/michael/my_py_scripts')
  - 设置环境变量PYTHONPATH
** 面向对象编程 Object Oriented Programming
- OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数.
- 在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。
- 自定义的对象数据类型就是面向对象中的类（Class）的概念。
- 数据封装、继承和多态是面向对象的三大特点
*** 类与实例 Class Instance
- 类名通常是大写开头的单词
- 创建实例是通过类名+()实现的
- My_students本身则是一个类
- 可以自由地给一个实例变量绑定属性，比如，给实例bart绑定一个name属性
- 有了__init__方法，在创建实例的时候，就不能传入空的参数了，
  必须传入与__init__方法匹配的参数，但self不需要传
- 除self之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、
  可变参数、关键字参数和命名关键字参数。
- 这些封装数据的函数是和Student类本身是关联起来的，我们称之为类的方法
- 义一个方法，除了第一个参数是self外，其他和普通函数一样。
- 调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入
# #################################################################################
- 和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，
  虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同
# #################################################################################
#+begin_src python :results output
class My_students(object):
    pass
ligy = My_students()
ligy.name = 'Li Gaoyang'
ligy.age = 26
print(ligy.name, ligy.age)
jjkprint(My_students)
class My_students2():
    def __init__(self, name, score):
        self.name = name
        self.score = score
    def print_score(self):
        print('%s: %s' % (self.name, self.score))
mark = My_students2('Mark', '99')
john = My_students2('John Nash', 100)
john.age = 70
print(mark.name)
mark.print_score()
#+end_src

#+RESULTS:
: Li Gaoyang 26
: <class '__main__.My_students'>
: Mark
: Mark: 99
*** 访问限制 <2018-06-29 Fri>
- 外部代码还是可以自由地修改一个实例的name、score属性
- bart.score = 99
- 实例的变量名如果以__开头，就变成了一个私有变量（private），
  只有内部可以访问，外部不能访问
- 在方法中，可以对参数做检查，避免传入无效的参数
- 以双下划线开头，并且以双下划线结尾的，是特殊变量，
  特殊变量是可以直接访问的，不是private变量
- 一个下划线开头的实例变量名,但是，请视为私有变量，不要随意访问
- 仍然可以通过_Student__name来访问__name变量，但是强烈建议你不要这么干，
  因为不同版本的Python解释器可能会把__name改成不同的变量名
- 表面上看，外部代码“成功”地设置了__name变量，但实际上这个__name变量和class内部的__name变量不是一个变量！
  内部的__name变量已经被Python解释器自动改成了_Student__name，而外部代码给bart新增了一个__name变量
#+begin_src python :results output
class Student(object):
    def __init__(self, name, gender):
        self.name = name
        self.__gender = gender
    def set_gender(self, gender):
        self.__gender = gender
    def get_gender(self):
        return self.__gender
bart = Student('Bart', 'male')
if bart.get_gender() != 'male':
    print('测试失败!')
else:
    bart.set_gender('female')
    if bart.get_gender() != 'female':
        print('测试失败!')
    else:
        print('测试成功!')

#+end_src

#+RESULTS:
: 测试成功!

*** 继承与多态 <2018-07-05 Thu>
- 继承最大的好处是子类获得了父类的全部功能
- 当子类和父类都存在相同的方法时，子类的方法覆盖了父类的方法
- 判断一个变量是否是某个类型可以用isinstance()判断
- 如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类
- 调用方只管调用，不管细节
“开闭”原：
- 对扩展开放：允许新增Animal子类
- 对修改封闭：不需要修改依赖Animal类型的run_twice()等函数
静态语言 vs 动态语言
  - 对于静态语言（例如Java）来说，如果需要传入Animal类型，
    则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法
  - 对于Python这样的动态语言来说，则不一定需要传入Animal类型。
    我们只需要保证传入的对象有一个run()方法就可以了
  - 动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭
    ,走起路来像鸭子”，那它就可以被看做是鸭子
小结
- 继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，
  子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。
- 动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。
#+begin_src python :results output
class Animal(object):
    def run(self):
        print('Animal is running...')
class Dog(Animal):
    def run(self):
        print('Dog is running...')
dog1 = Dog()
dog1.run()
dog1.run()
#+end_src

#+RESULTS:
: Dog is running...
: Dog is running...

*** 获取对象信息 <2018-08-10 Fri>
- 使用type()函数来判断对象类型
- 可以使用types模块中定义的常量来判断一个对象是否是函数
- 总是优先使用isinstance()判断类型，可以将指定类型及其子类"一网打尽"
- 获得一个对象的所有属性和方法，可以使用dir()函数
#+begin_src python :results output
print(type(123))
print(type(abs))
print(type('fda')==type(abs))
import types
def fn():
    pass
print(type(fn))
print(type(fn)==types.FunctionType)
print(type((x for x in range(9)))==types.GeneratorType)
print(type([x for x in range(9)]))
print(dir('dafdsa'))
#+end_src

#+RESULTS:
: <class 'int'>
: <class 'builtin_function_or_method'>
: False
: <class 'function'>
: True
: True
: <class 'list'>
: ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

* Tensor flow 中文社区
url:http://www.tensorfly.cn/tfdoc/get_started/introduction.html
#+begin_src python :results output
import tensorflow as tf
#+end_src
** 介绍
*** intro_mnist
**** mnist 数据集 <2018-05-05 Sat>
- mnist.train.images [6000, 28*28]
  数据集的标签是0到9的数字，是一个one-hot vector, (只有一个元素为1,其他为0.)
  0表示为 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
- mnist.train.labels [6000, 10]
**** softmax regression 介绍
- softmax模型可以用来给不同的对象分配概率。即使在之后，我们训练更加精细的模型时，
  最后一步也需要用softmax来分配概率。
- 为了用python实现高效的数值计算，我们通常会使用函数库，比如NumPy，
  会把类似矩阵乘法这样的复杂运算使用其他外部语言实现。
  不幸的是，从外部计算切换回Python的每一个操作，仍然是一个很大的开销。
- Tensorflow不单独地运行单一的复杂计算，
  而是让我们可以先用图描述一系列可交互的计算操作，然后全部一起在Python之外运行。
*** expert_mnist
** MNIST introduction
在机器学习模型设计时必须有一个单独的测试数据集不用于训练
而是用来评估这个模型的性能，从而更加容易把设计的模型推广
到其他数据集上（泛化）。
* Google机器学习速成课程
url:https://developers.google.cn/machine-learning/crash-course/
* Python 命令笔记
** <2018-05-21 Mon>
os.listdir('.')
'AbC'.lower()
'AbC'.upper()
'abc'[2]
for k, v in {'x': 'A', 'y': 'B'}.items():
    pass
L=[]
L.append(x)
L.pop()
L.pop(3)
d.pop('Jack')
** <2018-05-24 Thu>
可迭代对象：
- list
- tuple
- range(9)
- dictionary
- set
- str
- generator
  - 生成器
  - generator function
* Plot scientific data using python
** 'Colors in the default prop_cycle
#+begin_src python :results output
import numpy as np
import matplotlib.pyplot as plt
prop_cycle = plt.rcParams['axes.prop_cycle']
colors = prop_cycle.by_key()['color']
lwbase = plt.rcParams['lines.linewidth']
thin = lwbase / 2
thick = lwbase * 3
fig, axs = plt.subplots(nrows=2, ncols=2, sharex=True, sharey=True)
for icol in range(2):
    if icol == 0:
        lwx, lwy = thin, lwbase
    else:
        lwx, lwy = lwbase, thick
    for irow in range(2):
        for i, color in enumerate(colors):
            axs[irow, icol].axhline(i, color=color, lw=lwx, label=color)
            axs[irow, icol].axvline(i, color=color, lw=lwy)
        plt.legend()
for irow in range(2):
    axs[irow, 0].yaxis.set_ticks(np.arange(0, 10, 2))
fig.suptitle('Colors in the default prop_cycle', fontsize='large')
#plt.show()
plt.savefig("Colors_in_the_default_prop_cycle.eps", dpi=None, facecolor='w', edgecolor='w', orientation='portrait', format="eps", bbox_inches='tight')
print(plt.rcParams['axes.prop_cycle'].by_key()['color'])
#+end_src

#+RESULTS:
: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
* git@github.com:lijin-THU/notes-python.git
** 基础
*** 文件读写 <2018-09-04 Tue>
url: https://github.com/lijin-THU/notes-python/blob/master/02-python-essentials/02.21-file-IO.ipynb
Control + RightClick
** numpy <2018-09-04 Tue 11:14>
*** overview <2018-09-08 Sat>
- numpy中array()方法与基本库中list有很大不同，注意不要混淆！！！
- 修改array的形状,shape方法
- *乘法仍然是对应元素的乘积，并不是按照矩阵乘法来计算
- 矩阵乘法为A.dot(b)
- numpy.linspace(start_point, end_point, point_number)
- 从数组中选择元素src_python{numpy.array(list)[\[False, Ture, False, True\]]}
#+begin_src python :results output
a = [1, 2, 3, 9]
import numpy
b = numpy.array(a)
print(a * 2)
print(b * 2)
#print(a.shape)
print(b.shape)
b.shape = 2,2
print(b)
print(b * b)
c = numpy.linspace(0, 2*numpy.pi, 21)
sin_c = numpy.sin(c)
print(c)
print(sin_c)
print(sin_c > 0.8)
print(c[sin_c > 0.8])
print('s')
print(c[[False, False, False, True, True, True, True, True, False, False, False, False
, False, False, False, False, False, False, False, False, False]])
print(sin_c[sin_c > 0.8])
#+end_src

#+RESULTS:
#+begin_example
[1, 2, 3, 9, 1, 2, 3, 9]
[ 2  4  6 18]
(4,)
[[1 2]
 [3 9]]
[[ 1  4]
 [ 9 81]]
[ 0.          0.31415927  0.62831853  0.9424778   1.25663706  1.57079633
  1.88495559  2.19911486  2.51327412  2.82743339  3.14159265  3.45575192
  3.76991118  4.08407045  4.39822972  4.71238898  5.02654825  5.34070751
  5.65486678  5.96902604  6.28318531]
[  0.00000000e+00   3.09016994e-01   5.87785252e-01   8.09016994e-01
   9.51056516e-01   1.00000000e+00   9.51056516e-01   8.09016994e-01
   5.87785252e-01   3.09016994e-01   1.22464680e-16  -3.09016994e-01
  -5.87785252e-01  -8.09016994e-01  -9.51056516e-01  -1.00000000e+00
  -9.51056516e-01  -8.09016994e-01  -5.87785252e-01  -3.09016994e-01
  -2.44929360e-16]
[False False False  True  True  True  True  True False False False False
 False False False False False False False False False]
[ 0.9424778   1.25663706  1.57079633  1.88495559  2.19911486]
s
[ 0.9424778   1.25663706  1.57079633  1.88495559  2.19911486]
[ 0.80901699  0.95105652  1.          0.95105652  0.80901699]
#+end_example
*** matplotlib basics <2018-09-08 Sat 17:11>
- 清除、关闭图像 clf(), close(), close('all')
#+begin_src python :results output
from numpy import *
from matplotlib.pyplot import *
t = linspace(0, 2*pi, 50)
x = sin(t)
y = cos(t)
figure()
plot(x)
figure()
plot(y)
#+end_src

#+RESULTS:

*** numpy array <2018-09-08 Sat 18:12>
- 查看形状, np.shape(a)
- 查看元素数目, np.size(a)
- 查看数组维数, np.ndim(b)
- 与列表不同，数组中要求所有元素的 dtype 是一样的，
  如果传入参数的类型与数组类型不一样，需要按照已有的类型进行转换
- 多维数组索引, a[1, 3], a[1]
- 切片是引用, 因此，改变 b 会改变 a 的值。与列表(list)不同
- np.arange 函数来产生等差数组
- 花式索引需要指定索引位置, a[\[1, 2, -3\]]。还可以使用布尔数组来花式索引。
  但是list不行。
- 与切片不同，花式索引返回的是原对象的一个复制而不是引用
- where 函数会返回所有非零元素的索引
#+begin_src python :results output
import numpy as np
a = [i for i in range(10)]
a.append('dog')
aa = [i for i in range(10)]
print(a)
b = np.array(a)
bb = np.array(aa)
print(b.dtype, b.itemsize, b.shape, np.shape(a), np.ndim(a))
c = np.arange(0, 10, 2)
d = range(0, 10, 2)
print(type(c), c > 3, b[[0, 3, 2]], np.where(c[c > 3]))
print(type(d))
#+end_src

#+RESULTS:
: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'dog']
: <U21 84 (11,) (11,) 1
: <class 'numpy.ndarray'> [False False  True  True  True] ['0' '3' '2'] (array([0, 1, 2]),)
: <class 'range'>
*** array types <2018-09-09 Sun 15:47>
- 复数数组
- 复共轭 a.conj()
#+begin_src python :results output
import numpy as np
a = np.array([1 + 1j, 2, 3, 4])
print(a.real, a.imag, a.conj())
#+end_src

#+RESULTS:
: [1. 2. 3. 4.] [1. 0. 0. 0.] [1.-1.j 2.-0.j 3.-0.j 4.-0.j]
*** array calculation method <2018-09-09 Sun 16:57>
- 求所有元素的和 sum(a)
- 沿着第一维求和 sum(a, axis=0)
- 沿着第二维求和 sum(a, axis=1)
- 求所有元素的乘积 prod(a), a.prod()
- 全局最小 a.min()
- 沿着某个轴的最小 a.min(axis=1)
- 最大最小值的位置 a.argmin(), a.argmax()
- 均值 a.mean(axis=1)
- 加权平均 a.average(axis=1), a.average(axis=0, weights=[1,2])
*** numpy sorting <2018-09-09 Sun>
** TODO [#C] interfacing with other languages <2018-10-03 Wed>
   SCHEDULED: <2018-10-03 Wed 20:30>
   - State "TODO"       from              [2018-10-03 Wed 20:15]
* Coursera-ML-AndrewNg-Notes
** <2019-03-30 六 01:00> 课时12 梯度下降
- alpha是learning rate，可以是常数，不能太大或太小。
- 应该同时更新Theta_0,Theta_1,...Theta_n
- 事实证明线性回规的cost function都是弓形函数（凸函数，convex function），
  只有一个全局最小，没有局部最小。
- batch Gradient Descent: 每次更新时遍历所有training set.
- 也可以不遍历所有training set.
- Normal equation方法不适用于大量training set,梯度下降可以。
* TensorFlow learning on Github
** 疑问
   - 变量的creation和initialization区别是什么？都在执行什么操作？
     是否类似于C中的变量声明与定义？
* Handson-ml
** numpy and pandas
*** creating arrays and learning pandas <2020-01-23 Thu>
#+begin_src python :results output
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
a = np.zeros(4)
b = np.ones((3,2))
#a.append(9)
print(a)
print(np.linspace(1,8,5))
print(b)
c = np.random.rand(20, 10)
fig = plt.figure(1, figsize=(7, 6))
plt.imshow(np.sin(c))
s = pd.Series(np.random.randn(5), index=['a','b','c','d','e'])
d = {'a' : 1, 'b' : 2, 'c' : 3, 'd' : 4}
s2 = pd.Series(d, index=['d','c','b'])
print(s)
print()
print(s[[2, 1]])
print(s[s > 1])
print()
print(s2)
d2 = {'a':list(range(3)), 'b':list(range(3,6)), 'c':list(range(6,9))}
df = pd.DataFrame(d2, index=[1,2,3], columns=['first', 'second', 'a'])
print(df)
df2 = pd.DataFrame(d2)
print()
print(df2)
df3 = pd.DataFrame.from_dict(d2, orient='index', columns=list(range(3,6)))
print()
print(df3)
df3[9] = df3[5] < 5
df3[7] = df3[3] + 1
print()
print(df3)
df3.pop(9)
print()
print(df3)
df3['ex'] = [1, 3, 4]
print()
print(df3)
df4 = df3.assign(ex2=df3[4]//4.)
print()
print(df4)
#plt.show()
#return 'python-matplot-fig2.png' # return filename to org-mode
#+end_src

#+RESULTS:
#+begin_example
[0. 0. 0. 0.]
[1.   2.75 4.5  6.25 8.  ]
[[1. 1.]
 [1. 1.]
 [1. 1.]]
a    0.639371
b    0.462894
c    0.217726
d   -0.977587
e    0.495593
dtype: float64

c    0.217726
b    0.462894
dtype: float64
Series([], dtype: float64)

d    4
c    3
b    2
dtype: int64
  first second  a
1   NaN    NaN  0
2   NaN    NaN  1
3   NaN    NaN  2

   a  b  c
0  0  3  6
1  1  4  7
2  2  5  8

   3  4  5
a  0  1  2
b  3  4  5
c  6  7  8

   3  4  5      9  7
a  0  1  2   True  1
b  3  4  5  False  4
c  6  7  8  False  7

   3  4  5  7
a  0  1  2  1
b  3  4  5  4
c  6  7  8  7

   3  4  5  7  ex
a  0  1  2  1   1
b  3  4  5  4   3
c  6  7  8  7   4

   3  4  5  7  ex  ex2
a  0  1  2  1   1  0.0
b  3  4  5  4   3  1.0
c  6  7  8  7   4  1.0
#+end_example
